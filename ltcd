cd_func ()
{
  local x2 prompt the_new_dir valid_dir index answer line last lastcom
  local -i cnt exist

  the_new_dir=$1
  if [[ $the_new_dir == "--" ]] || [[ $the_new_dir == "-?" ]]; then
    #dirs | awk '{for (i = NF; i > 0; i--) {n = i - 1; if (n < 10) sn = " "n; else sn = n; print sn"  "$i}}'
    if [[ "$the_new_dir" == "--" ]]; then
      prompt="Where to go (locally)? Enter the number (empty == 0):  "
      # Replace the last line with " 0  <do nothing>" as it's PWD.
      dirs -v | sort -nr | sed '$ s/.*/ 0  <do nothing>/'
    else
      prompt="Where to go (globally)? Enter the number (empty == 0) or /word to search \"word\" case-insensitively:  "
      sort -r ~/.cd_glob_stats 2>/dev/null |
      {
        while read line; do
          READLINE_LINE=""
          [[ "$last" == "" ]] && { last=$line; continue; }
          lastcom=`printf "%s\n%s\n" "$last" "$line" | sed -e 'N;s/^\(.*\)\/.*\n\1.*$/\1/'`
          echo "$lastcom?$last"
          last=$line
        done
        echo "?$last"
      } |
      {
        cnt=`wc -l ~/.cd_glob_stats | awk '{print $1}'`
        awk --re-interval -v n=$cnt -F? '
          {
            c = $1

            if (c > l)
              len = length(c)
            else
              len = length(l)

            sub("^.{"len"}", "\x1b[47m\x1b[K&\x1b[m\x1b[K", $2)

            printf "%2d  %s\n", n--, $2
            l = c
          }
        '
        echo " 0  <do nothing>"
      } | tee ~/.cd_glob_stats_sort
    fi

    echo

    while :; do
      echo -n "$prompt"
      read -r -e answer
      READLINE_LINE=""

      [[ "$answer" == "" ]] && answer=0

      [[ "${answer:0:1}" == "/" ]] && [[ "$the_new_dir" == "-?" ]] && {
        if [[ "${answer:1}" == "" ]]; then
          awk '{gsub(/\x1b\[[0-9]*m|\x1b\[K/, ""); print $0}' ~/.cd_glob_stats_sort | less
        else
          awk '{gsub(/\x1b\[[0-9]*m|\x1b\[K/, ""); print $0}' ~/.cd_glob_stats_sort | grep -i "${answer:1}"
        fi
        continue
      }

      if [[ "${answer//[0-9]/}" != "" ]]; then
        echo "Digit only, please."
        continue
      fi

      # Remove leading 0's from the number, if any.
      answer=$((10#$answer))
      [[ "$answer" -eq 0 ]] && return 0
      if [[ "$the_new_dir" == "--" ]]; then
        valid_dir=`dirs +$answer 2>/dev/null`
        if [[ "$valid_dir" == "" ]]; then
          echo "Enter valid number, please."
          continue
        fi
        the_new_dir=$valid_dir
      else
        if [[ "$answer" -gt `wc -l ~/.cd_glob_stats | awk '{print $1}'` ]]; then
          echo "Enter valid number, please."
          continue
        fi
        the_new_dir=`/bin/grep "^ *$answer  " ~/.cd_glob_stats_sort | awk '{gsub(/^[0-9 ]*|\x1b\[[0-9]*m|\x1b\[K/, ""); print $0}'`
      fi

      break
    done
  fi

  [[ -z $the_new_dir ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    the_new_dir=$(dirs +$index)
    [[ -z $the_new_dir ]] && return 1
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Global stats
  {
    exist=0
    while read line; do
      READLINE_LINE=""
      [[ "$line" == "$the_new_dir" ]] && exist=1
    done < ~/.cd_glob_stats
  } 2>/dev/null

  if [[ $exist -eq 0 ]]; then
    if [[ -f ~/.cd_glob_stats ]]; then
      # The newer the closer to the head (except the entry is already in the history). Up to 30 lines.
      sed -i "1s?^?$the_new_dir\n?" ~/.cd_glob_stats
      sed -i "31,$ d" ~/.cd_glob_stats
    else
      echo "$the_new_dir" > ~/.cd_glob_stats
    fi
  fi

  #
  # Trim down everything beyond 101th entry
  popd -n +100 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 99; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

alias cd=cd_func

# Only do the binding in interactive shell.
if [[ $BASH_VERSION > "2.05a" ]] && [ ! -z "$PS1" ]; then
  # alt+q shows the  local menu
  bind -x "\"\eq\":cd_func -- ;"
  # alt+a shows the global menu
  bind -x "\"\ea\":cd_func -? ;"
fi

