cd_func ()
{
  local x2 prompt the_new_dir valid_dir adir index answer line
  local -i cnt start exist

  the_new_dir=$1
  if [[ $the_new_dir == "--" ]] || [[ $the_new_dir == "-?" ]]; then
    #dirs | awk '{for (i = NF; i > 0; i--) {n = i - 1; if (n < 10) sn = " "n; else sn = n; print sn"  "$i}}'
    if [ "$the_new_dir" == "--" ]; then
      prompt="Where to go? Enter the number (empty == 0):  "
      dirs -v | sort -nr
    else
      prompt="Where to go? Enter the number (empty == 0 and / to search):  "
      sort ~/.cd_glob_stats 2>/dev/null | uniq | awk '{printf "%2d  %s\n", NR, $0} END {print " 0  <do nothing>"}' | sort -nr | tee ~/.cd_glob_stats_sort
    fi

    echo

    while :; do
      echo -n "$prompt"
      read -r -e answer
      READLINE_LINE=""

      [ "$answer" == "" ] && answer=0

      [ "$answer" == "/" ] && [ "$the_new_dir" == "-?" ] && { less ~/.cd_glob_stats_sort; continue; }

      if [ "${answer//[0-9]/}" != "" ]; then
        echo "Digit only, please."
        continue
      fi

      if [ "$the_new_dir" == "--" ]; then
        valid_dir=`dirs +$answer 2>/dev/null`
        if [ "$valid_dir" == "" ]; then
          echo "Enter valid number, please."
          continue
        fi
        the_new_dir=$valid_dir
      else
        [ "$answer" -eq 0 ] && return 0
        if [ "$answer" -ge `wc -l ~/.cd_glob_stats_sort | awk '{print $1}'` ]; then
          echo "Enter valid number, please."
          continue
        fi
        the_new_dir=`tail -$((answer + 1)) ~/.cd_glob_stats_sort | head -1 | awk '{sub(/^[0-9 ]*/, ""); print $0}'`
      fi

      break
    done
  fi

  [[ -z $the_new_dir ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Global stats
  {
    exist=0
    while read line; do
      READLINE_LINE=""
      [ "$line" == "$the_new_dir" ] && exist=1
    done < ~/.cd_glob_stats
  } 2>/dev/null

  if [ $exist -eq 0 ]; then
    echo $the_new_dir >> ~/.cd_glob_stats
    # Init: 0 line to 30 lines; Afterwards: replace the file with the last 15 lines, increase to 30, replace again...
    start=$(($(wc -l ~/.cd_glob_stats | awk '{print $1}') - 30))
    [ $start -gt 0 ] && sed -i "1,$((start + 15)) d" ~/.cd_glob_stats
  fi

  #
  # Trim down everything beyond 101th entry
  popd -n +100 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 99; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

alias cd=cd_func

# Only do the binding in interactive shell.
if [[ $BASH_VERSION > "2.05a" ]] && [ ! -z "$PS1" ]; then
  # alt+q shows the  local menu
  bind -x "\"\eq\":cd_func -- ;"
  # alt+a shows the global menu
  bind -x "\"\ea\":cd_func -? ;"
fi

