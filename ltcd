# No args
cdrm ()
{
	local -r CDF="$HOME/.cd/stats_glob"
	local i

	while read i; do
		[ -d "$i" ] && [ -x "$i" ] && { echo "$i"; continue; }
		echo  "Removing \"$i\"" > /dev/stderr
	done < $CDF > $CDF.tmp

	mv $CDF.tmp $CDF
}

# No args
cdedit ()
{
	local -r CDF="$HOME/.cd/stats_glob"

	vim $CDF
	/bin/rm -f $CDF~
}

cd_func_cursor ()
{
  local raw char currow
  local -i sub

  if [[ "${1//[0-9]/}" != "" ]]; then
    raw=`echo "$1" | awk '{gsub(/^[0-9\t ]*|\x1b\[[0-9;]*m|\x1b\[K/, ""); print $0}'`

    char="${1:4:1}"

    # Get the number of lines the string $1 covers (sub is 1 less than the number of lines).
    if [[ "${char/[0-9 ]/}" != "" ]]; then
      sub=$(((${#raw}+4)/COLUMNS))
    else
      sub=$(((${#raw}+8)/COLUMNS))
    fi
  else
    # Called from 'nm' mode while $1 is a series of numbers.
    sub=$((${#1}/COLUMNS))
  fi

  # If $1 is a one-line string, just set the cursor to the column 0 of the current row. Be faster.
  [[ $sub -eq 0 ]] && { tput hpa 0; return 0; }

  # Get the current row number.
  echo -en "\E[6n"
  read -sd R currow
  currow=${currow#*[}
  currow=${currow%;*}
  let currow--

  # Get the row number that the cursor should go back to. A two-line string will need to put the current cursor 1 row back, and a three-line string to put it 2 rows back.
  tput cup $((currow-sub)) 0

  return 0
}

cd_func_hlt ()
{
  echo "$1" | awk -v width=$COLUMNS '
    {
      col = (int((length() - 1) / width) + 1) * width
      format = "%s%-"col"s%s"
      printf format, "\x1b[47m\x1b[K", $0, "\x1b[m\x1b[K\n"
    }
  ' | sed -e "s/\(Global\|Local \)/\x1b[1m\1\x1b[0m\x1b[47m/" \
          -e "s/\(number\)/\x1b[1;4;34m\1\x1b[0m\x1b[47m/"    \
          -e "s/\(j\/k\)/\x1b[1;4;35m\1\x1b[0m\x1b[47m/"      \
          -e "s/\(\/word\)/\x1b[1;4;38;5;100m\1\x1b[0m\x1b[47m/"

  return 0
}

# $1: The name of caller's variable which is to be set for the target dir path.
# $2: The prompt string for UI.
# $3: The file to be read for showing choices to user.
# $4: The search pattern, if applicable. Otherwise "".
cd_func_ui ()
{
  local valid_dir dir ok line twiddle sl mode pat
  local -i range i max first
  local -a pool

  pat="$4"
  if [[ "`tail -1 $3`" == "     0	<do nothing>" ]]; then
    range=1
  else
    range=0
  fi
  eval "dir=\$$1"

  i=1
  while IFS= read line; do
    pool[i]="$line"
    i+=1
  done < "$3"

  max=$((i-1))
  i=$max
  mode="jk"
  first=1
  cd_func_hlt "$2"
  while :; do
    if [[ $first -eq 0 ]]; then
      IFS= read -rsn1 twiddle
    else
      IFS= read -ren1 twiddle 2>/dev/null
      READLINE_LINE=""
      first=0
    fi

    # Check the input for specific modes. Set/echo sl, set valid_dir.
    if [[ "$mode" == "jk" ]]; then
      case "$twiddle" in
            "/") tput ed; mode="sh"; sl="/"; echo -en "$sl";;
          [0-9]) tput ed; mode="nm"; sl="$twiddle"; echo -en "$sl";;
            "j") tput ed; let i=i+1; [ $i -gt $max ] && i=1; sl=${pool[i]}; echo -en "$sl"; cd_func_cursor "$sl";;
            "k") tput ed; let i=i-1; [ $i -eq 0 ] && i=$max; sl=${pool[i]}; echo -en "$sl"; cd_func_cursor "$sl";;
             "") if [[ "$sl" == "     0	<do nothing>" ]] || [[ "$sl" == " 0  <do nothing>" ]] || [[ "$sl" == "" ]]; then
                   valid_dir="."
                 else
                   valid_dir=`echo "$sl" | sed 's/^[\t 0-9]*//'`
                 fi
                 break;;
        $'\x7f') sl=""; tput ed;;
      esac
      continue
    elif [[ "$mode" == "sh" ]]; then
      case "$twiddle" in
        # Backspace handling
        $'\x7f') sl="${sl%?}"; [[ "$sl" == "" ]] && mode="jk"; echo -en "\010 \010";;
                 # sl is at least "/" in search mode, it can't be "", so always do echo.
             "") echo
                 if [[ "${sl:1}" == "" ]]; then
                   less "$3"
                   cd_func_hlt "$2"
                   sl=""
                   mode="jk"
                   continue
                 else
                   if [[ "$pat" == "" ]]; then
                     pat="${sl:1}"
                   else
                     pat="$pat|${sl:1}"
                   fi
                   grep -v "^     0	<do nothing>$\|^ 0  <do nothing>$" "$3" > "$ff".tmp
                   ###awk '{gsub(/\x1b\[[0-9;]*m|\x1b\[K/, ""); print $0}' "$ff".tmp | cxpgrep -i "$pat" | awk '{sub(/^.*\|\x1b\[m\x1b\[K/, ""); print $0}' > "$ff"
                   awk '{gsub(/\x1b\[[0-9;]*m|\x1b\[K/, ""); print $0}' "$ff".tmp | /bin/grep -Pi "${sl:1}" | cxpgrep -i "$pat" | awk '{sub(/^.*\|\x1b\[m\x1b\[K/, ""); print $0}' > "$ff"
                   if [[ $range -eq 1 ]]; then
                     echo "     0	<do nothing>" >> "$ff"
                   else
                     echo " 0  <do nothing>" >> "$ff"
                   fi
                   cat "$ff"
                   eval "$1=\"${sl:1}\""
                   cd_func_ui "$1" "`if [[ $range -eq 0 ]]; then echo "Local "; else echo "Global"; fi` cd history: choose a number (empty == 0) or navigate with j/k keys or search \"word\" with /word case-insensitively:  " "$ff" "$pat"
                   return 0
                 fi
                 ;;
    # All printable chars.
    [[:print:]]) sl="$sl""$twiddle"; echo -en "$twiddle";;
              *) read -rsn5 -t 0.1 twiddle;;
      esac
      continue
    elif [[ "$mode" == "nm" ]]; then
      case "$twiddle" in
        $'\x7f') sl="${sl%?}"; echo -en "\010 \010";;
            "/") cd_func_cursor "$sl"; tput ed; mode="sh"; sl="/"; echo -en "$sl";;
          [0-9]) sl="$sl""$twiddle"; echo -en "$twiddle";;
            "j") cd_func_cursor "$sl"; tput ed; mode="jk"; let i=i+1; [ $i -gt $max ] && i=1; sl=${pool[i]}; echo -en "$sl"; cd_func_cursor "$sl";;
            "k") cd_func_cursor "$sl"; tput ed; mode="jk"; let i=i-1; [ $i -eq 0 ] && i=$max; sl=${pool[i]}; echo -en "$sl"; cd_func_cursor "$sl";;
             "") if [[ "$sl" == "" ]]; then
                   sl=0
                 else
                   echo
                 fi
                 # Remove leading 0's from the number, if any.
                 sl=$((10#$sl))
                 if [[ "$sl" -lt 0 ]] || [[ "$sl" -gt 99 ]]; then
                   echo -e "${GOLD}Enter valid number, please.${NC}"
                   cd_func_hlt "$2"
                   sl=""
                   continue
                 fi
                 [[ "$sl" -eq 0 ]] && { eval "$1=."; return 0; }
                 if [[ $range -eq 0 ]]; then
                   if [[ "$dir" == "--" ]]; then
                     valid_dir=`dirs +$sl 2>/dev/null`
                     if [[ "$valid_dir" == "" ]]; then
                       echo -e "${GOLD}Enter valid number, please.${NC}"
                       cd_func_hlt "$2"
                       sl=""
                       continue
                     fi
                   else
                     if [[ "`awk -v var="$sl" '$1 == var {print "yes"}' "$3"`" != "yes" ]]; then
                       echo -e "${GOLD}Enter valid number, please.${NC}"
                       cd_func_hlt "$2"
                       sl=""
                       continue
                     fi
                     valid_dir=`/bin/egrep "^ ?$sl  " "$3" | awk '{gsub(/^[0-9\t ]*/, ""); print $0}'`
                   fi
                 else
                   ok=""
                   if [[ "$dir" == "-?" ]]; then
                     [[ "$sl" -lt `wc -l "$3" | awk '{print $1}'` ]] && ok="yes"
                   else
                     ok=`awk -v var="$sl" '$1 == var {print "yes"}' "$3"`
                   fi
                   if [[ "$ok" != "yes" ]]; then
                     echo -e "${GOLD}Enter valid number, please.${NC}"
                     cd_func_hlt "$2"
                     sl=""
                     continue
                   fi
                   valid_dir=`/bin/egrep "^ {4,5}$sl	" "$3" | awk '{gsub(/^[0-9\t ]*/, ""); print $0}'`
                 fi
                 break;;
      esac
    fi
  done

  # Remove possible color sequences.
  valid_dir=`echo "$valid_dir" | awk '{gsub(/\x1b\[[0-9;]*m|\x1b\[K/, ""); print $0}'`

  # Pass back a string!!!
  eval "$1=\"$valid_dir\""

  return 0
}

cd_func ()
{
  local x2 locglb the_new_dir index file
  local -r fg="$HOME/.cd/stats_glob"
  local -r fgs="$HOME/.cd/stats_glob_sort"
  local -r ff="$HOME/.cd/stats_fuzzy"
  local -r fls="$HOME/.cd/stats_local_sort"
  local -i cnt

  mkdir -p "$HOME/.cd"
  the_new_dir=$1
  if [[ $the_new_dir == "--" ]] || [[ $the_new_dir == "-?" ]]; then
    #dirs | awk '{for (i = NF; i > 0; i--) {n = i - 1; if (n < 10) sn = " "n; else sn = n; print sn"  "$i}}'
    if [[ "$the_new_dir" == "--" ]]; then
      locglb="Local "
      file="$fls"
      # Replace the last line with " 0  <do nothing>" as it's PWD.
      dirs -v | sort -nr | sed '$ s/.*/ 0  <do nothing>/' | tee "$file"
    else
      locglb="Global"
      file="$fgs"
      {
        nl "$fg" 2>/dev/null | sort -nr
        echo "     0	<do nothing>"
      } | tee "$file"
    fi

    ###echo

    cd_func_ui the_new_dir "$locglb cd history: choose a number (empty == 0) or navigate with j/k keys or search \"word\" with /word case-insensitively:  " "$file" ""
  fi

  [[ $the_new_dir == "." ]] && return 0
  [[ -z $the_new_dir ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    the_new_dir=$(dirs +$index)
    [[ -z $the_new_dir ]] && return 1
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  # If the target dir is not accessible, then use it as pattern to search history.
  if [[ ! -d $the_new_dir ]] || [[ ! -x $the_new_dir ]]; then
    nl "$fg" 2>/dev/null | sort -nr | cxpgrep -i "$the_new_dir" | awk '{sub(/^.*\|\x1b\[m\x1b\[K/, ""); print $0}' > "$ff"
    cnt=`wc -l "$ff" | awk '{print $1}'`
    if [[ cnt -eq 1 ]]; then
      the_new_dir=`cat "$ff" | awk '{gsub(/^[0-9\t ]*|\x1b\[[0-9;]*m|\x1b\[K/, ""); print $0}'`
    elif [[ cnt -gt 1 ]]; then
      echo "     0	<do nothing>" >> "$ff"
      cat "$ff"
      ###echo
      # There are 3 scenarios of dir access exception:
      # 1. No access and nothing found in global cd history -- show the error message without color (the outside pushd does it).
      # 2. No access and 1 entry found in global cd history -- directly go there without showing any error.
      # 3. No access and multiple entries found in global cd history (the following) -- let user see colored error message and choose another one from the output list.
      echo -e ${GOLD}`pushd "$the_new_dir" 2>&1`${NC}
      cd_func_ui the_new_dir "Global cd history: choose a number (empty == 0) or navigate with j/k keys or search \"word\" with /word case-insensitively:  " "$ff" "$the_new_dir"
      [[ $the_new_dir == "." ]] && return 0
    fi
  fi

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Global stats
  if [[ -f "$fg" ]]; then
    # The newer the closer to the head. Up to 99 lines.
    awk -v var="$the_new_dir" '$0 != var' "$fg" > "$fg".tmp
    mv "$fg".tmp "$fg"
    sed -i "1s?^?$the_new_dir\n?" "$fg"
    sed -i "100,$ d" "$fg"
  else
    echo "$the_new_dir" > "$fg"
  fi

  #
  # Trim down everything beyond 101th entry
  popd -n +100 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 99; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

alias cd=cd_func

# Only do the binding in interactive shell.
if [[ $BASH_VERSION > "2.05a" ]] && [ ! -z "$PS1" ]; then
  # alt+q shows the  local menu
  bind -x "\"\eq\":cd_func -- ;"
  # alt+a shows the global menu
  bind -x "\"\ea\":cd_func -? ;"
fi

